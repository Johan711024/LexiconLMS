@using LexiconLMS.Client.State;
@using LexiconLMS.Shared.DTOs;
@using LexiconLMS.Client.Services;
@implements IDisposable
@inject StateContainer StateContainer



<div id="courseList" >
    <p>Kurser</p>
    <ol class="list-group list-group-numbered">
        @foreach (var course in courseList)
        {
            //ToDo: Aktiv lï¿½nk
            @*class="list-group-item list-group-item-action active" aria-current="true"*@

            <li class="list-group-item list-group-item-action" style="cursor: grab" @onclick="async () => await GetCourse(course)" @onclick:stopPropagation="true">
            @course.Name  

           @* <span class="badge bg-primary rounded-pill">14</span>*@           
            </li>
            
           
        }
        
    </ol>
    <button style="margin-top: 12px"  @onclick="()=>CreateCourse()" type="button" class="btn btn-primary">Skapa ny kurs</button>
</div>

@code {

    [Parameter]
    public IEnumerable<CourseDto> courseList { get; set; } = new List<CourseDto>();

    private void doSomething()
    {

        Console.WriteLine("From courseList");
    }

    [Parameter]
    public EventCallback<CourseDto> xGetCourse { get; set; }


    public async Task GetCourse(CourseDto course)
    {
        Console.WriteLine("From courseList GetCourse");

        ChangePropertyValue(course);

        await xGetCourse.InvokeAsync(course);
    }

    public void CreateCourse()
    {
        Console.WriteLine("CreateCourse");


    }

    //----------------------------------------------------
    //state management

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }
    private void ChangePropertyValue(CourseDto course)
    {
        StateContainer.EditCourse = course;
        
    }
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
    
}