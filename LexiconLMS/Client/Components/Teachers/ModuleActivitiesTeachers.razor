@using LexiconLMS.Client.State;
@using LexiconLMS.Shared.DTOs;
@implements IDisposable
@inject StateContainer StateContainer

<div id="moduleActivites" style="width: 100%">
    
    
    <div class="accordion" id="accordionPanelsStayOpenExample">

        @{
            var i = 0;
        }
        
        @foreach (var module in courseSelectedModules)
        {
            i++;

            var h2Id = "panelsStayOpen-heading" + i;

            <div class="accordion-item">
                
                <h2 class="accordion-header" id="panelsStayOpen-heading@(i)">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse@(i)" aria-expanded="false" aria-controls="panelsStayOpen-collapse@(i)">
                        @module.Name
                    </button>
                </h2>

                <EditButton StartEditing="()=>ChangePropertyValue(module)" Top="-48px" Left="0px"></EditButton>

                <div id="panelsStayOpen-collapse@(i)" class="accordion-collapse collapse @(i==1 ? "show" : "")" aria-labelledby="panelsStayOpen-headingOne">
                    <div class="accordion-body">

                        <ActivityTeachers forEditingActivities="forEditingActivities" courseSelectedModulesActivities="@module.Activitys" />

                    </div>
                </div>
            </div>
        }
    </div>
</div>



@code {


    private Modal? Modal { get; set; }


    [Parameter]
    public IEnumerable<ModuleDto> courseSelectedModules { get; set; } = new List<ModuleDto>();

    private void doSomething()
    {
        Console.WriteLine("From activities");
    }

    [Parameter]
    public EventCallback forEditingModules { get; set; }

    [Parameter]
    public EventCallback forEditingActivities { get; set; }


    //----------------------------------------------------
    //state management

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }
    private void ChangePropertyValue(ModuleDto module)
    {
        StateContainer.EditModule = module;

        ChangeModalValue();

    }
    private void ChangeModalValue()
    {
        StateContainer.ModalOpen = true;
        StateContainer.ModalContentType = "EditModule";
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}