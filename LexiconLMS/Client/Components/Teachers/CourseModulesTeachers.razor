@using LexiconLMS.Client.State;
@using LexiconLMS.Shared.DTOs;
@implements IDisposable
@inject StateContainer StateContainer

<div id="courseModules" style="

        display: flex;
        flex-direction:column;
        align-items: center;
        justify-content: center;
        width: 100%;

">
    @{
        if (courseSelected == null)
        {
            <h3>Välj kurs du vill ha information om</h3>
        }
        else
        {
            <h1>@courseSelected.Name</h1>
            <EditButton StartEditing="()=>ChangePropertyValue(courseSelected)" Top=" -10px" Left="-4px"></EditButton>
        
            <p>Kursbeskrivning:&nbsp;@courseSelected.Desc</p>

    
            if (courseSelected.Modules == null)
            {
                <p>Finns inga moduler inlagda på denna kurs</p>
            }
            else
            {
                var editModule = "module";
                var editModuleId = @courseSelected.Id;
                var editActivity = "activity";

                <ModuleActivitiesTeachers forEditingModules="()=>openEdit(editModule, editModuleId)" forEditingActivities="()=>openEdit(editActivity)" courseSelectedModules="@courseSelected.Modules" />
            }
        }
    }


</div>



@code {



    [Parameter]
    public CourseDto courseSelected { get; set; }

    private void doSomething()
    {
        Console.WriteLine("courseSelected: " + courseSelected);
    }





    private void openEdit(string editName, int id=0)
    {
        Console.WriteLine("Open for edit...: " + editName);




        switch (editName)
        {
            case  "course":
                Console.WriteLine($"Course with id {id}.");

                break;

            case "module":
                Console.WriteLine($"Module with id {id}.");
                break;

            case "activity":
                Console.WriteLine($"Activity with id {id}.");
                break;

            default:
                Console.WriteLine("found nothing to edit");
                break;
        }

    }

    //----------------------------------------------------
    //state management

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }
    private void ChangePropertyValue(CourseDto course)
    {
        StateContainer.EditCourse = course;
        ChangeModalValue();

    }
    private void ChangeModalValue()
    {
        StateContainer.ModalOpen = true;
        StateContainer.ModalContentType = "EditCourse";
    }
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

}