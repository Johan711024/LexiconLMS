@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using LexiconLMS.Shared
@using System.Security.Claims;
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <AuthorizeView>
        @if (context.User.IsInRole("Teacher"))
        {
            <h2>@context.User.Identity.Name is a Teacher</h2>
        }
        <h2>@user.Identity.Name</h2>
        <ul>
            @foreach(var c in context.User.Claims)
            {
                <li>Claimtype: @c.Type, Value: @c.Value</li>
            }
        </ul>
    </AuthorizeView>
}

@code {
    private ClaimsPrincipal user;

    private WeatherForecast[]? forecasts;

    [CascadingParameter]
    public Task<AuthenticationState> authenState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = (await authenState).User;
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
