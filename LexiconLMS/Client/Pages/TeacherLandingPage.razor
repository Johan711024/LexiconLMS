@page "/TeacherLandingPage"
@using LexiconLMS.Client.Components.Teachers
@using LexiconLMS.Client.Components;
@using LexiconLMS.Client.State;
@using LexiconLMS.Shared.DTOs;
@using LexiconLMS.Client.Services;
@implements IDisposable
@inject StateContainer StateContainer

<StateManagementTool />


<div id="teacherLandingPage" class="container">

    <div class="row justify-content-center gx-5">
        <div class="col-3" style="align-content: end">
            <CourseList courseList="courses" xGetCourse="selectCourse"></CourseList>
        </div>
        <div class="col-9">
            <CourseModulesTeachers courseSelected="CourseSelected"></CourseModulesTeachers>
        </div>
    </div>
</div>
<Modal @ref="Modal" />

@{
    if (StateContainer.ModalOpen)
    {
        Modal?.Open();
    }
    else
    {
        Modal?.Close();
    }
}


@code {

    public Modal? Modal { get; set; }

    private IEnumerable<CourseDto> courses = new List<CourseDto>();

    public CourseDto? CourseSelected { get; set; } 

    [Inject]
    public ICourseClient CourseClient { get; set; } = default!;

    public void StateModalEditReducer(){

        switch (StateContainer.ModalContentType)
        {
            case  "course":
                var dtoCourse = StateContainer.EditCourse;
                Console.WriteLine($"Course with id {dtoCourse.Id}.");
                break;

            case "module":
                var dtoModule = StateContainer.EditModule;
                Console.WriteLine($"Module with id {dtoModule.Id}.");
                break;

            case "activity":
                var dtoActivity = StateContainer.EditActivity;
                Console.WriteLine($"Activity with id {dtoActivity.Id}.");
                break;

            default:
                Console.WriteLine("found nothing to edit");
                break;
        }
    }


    protected override async Task OnInitializedAsync()
    {

        var res = await CourseClient.GetAsync();
        courses = res;
    }   

    public void selectCourse(CourseDto course)
    {
        CourseSelected = course;
        Console.WriteLine("selectedCourse" + course.Name);
    }

    private string courseSelected()
    {
        return "2";
    }

    //----------------------------------------------------
    //state management

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

}